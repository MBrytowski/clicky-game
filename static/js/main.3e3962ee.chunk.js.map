{"version":3,"sources":["components/Header/index.js","components/Card/index.js","components/Wrapper/index.js","components/Footer/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","className","href","message","roundScore","highScore","Card","alt","name","src","image","id","onClick","clickyClick","Wrapper","children","Footer","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","undefined","state","notChosen","find","item","setState","pics","newCollar","filter","shuffleBoard","puppy","sort","Math","random","data","_this2","components_Header","components_Wrapper","map","card","components_Card","key","clicked","components_Footer","Component","App","components_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e3962ee.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <>\n      <ul className=\"nav header sticky-top justify-content-center\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/\">\n            Click Memory Game\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <p className=\"nav-link\">{props.message}</p>\n        </li>\n        <li className=\"nav-item\">\n          <p className=\"nav-link\">Current Score: {props.roundScore} | Top Score: {props.highScore}</p>\n        </li>\n      </ul>\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Memory Game</h1>\n          <p className=\"lead\">\n            Click on any picture below, but be sure not to click the same picture twice!\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = props => (\n    <div className=\"puppy-card img-container\">\n        <img alt={props.name} src={props.image} id={props.id}\n        onClick={() => props.clickyClick(props.id)} className=\"shuffle\"/>\n    </div>\n)\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(){\n    return(\n        <>\n        <nav className=\"navbar footer navbar-light bg-light\">\n        <p className=\"navbar-brand link\">Created with React</p>\n        </nav>\n        </>\n    );\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Header from \"../Header\";\nimport pics from \"../data.json\";\nimport Card from \"../Card\";\nimport Wrapper from \"../Wrapper\";\nimport Footer from \"../Footer\";\n\nclass GameBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      pics: pics,\n      notChosen: pics,\n      highScore: 0,\n      roundScore: 0,\n      message: \"Click an image to begin!\"\n    };\n  }\n  //on click handler - check if item has been clicked, if so reset round score and shuffle board and update high\n  //score if round score is greater than high score\n  //if not, increase round score by 1, shuffle board and update clicked to true\n  clickyClick = id => {\n    const dogCollar = this.state.notChosen.find(item => item.id === id);\n    if (dogCollar === undefined) {\n        this.setState({\n            highScore: (this.state.roundScore > this.state.highScore) ? this.state.roundScore : this.state.highScore,\n            roundScore: 0,\n            pics: pics,\n            notChosen: pics,\n            message: \"Bummer! You choose the same one. Click another image to play again!\"\n        })\n    } else {\n        const newCollar = this.state.notChosen.filter(item => item.id !== id);\n      this.setState({ \n          roundScore: this.state.roundScore + 1,\n          pics: pics,\n          notChosen: newCollar,\n          message: \"Great guess!\" \n        });\n    }\n    this.shuffleBoard();\n  };\n\n  //shuffle board function - populate board by looping(map) through data array - randomize - takes in data array\n  //return new shuffled array and update state with new array - update state in this function\n  shuffleBoard = () => {\n    const puppy = this.state.pics.sort(() => Math.random() - 0.5);\n    this.setState({ puppy });\n  };\n\n  componentDidMount() {\n    this.shuffleBoard();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          highScore={this.state.highScore}\n          roundScore={this.state.roundScore}\n          message={this.state.message}\n        />\n        <Wrapper>\n          {this.state.pics.map(card => (\n            <Card id={card.id} \n            key={card.id} \n            image={card.image} \n            clicked={card.clicked} \n            clickyClick={this.clickyClick}\n            roundScore={this.state.roundScore}/>\n          ))}\n        </Wrapper>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport GameBoard from \"./components/GameBoard\";\n\nclass App extends Component {\n  render() {\n    return (\n      \n      <div className=\"App\">\n         <GameBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}