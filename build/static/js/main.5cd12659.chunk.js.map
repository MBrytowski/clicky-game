{"version":3,"sources":["components/Header/index.js","components/Card/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","class","href","roundScore","highScore","Card","className","alt","name","src","image","id","onClick","shuffleBoard","GameBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickyClick","Data","clicked","setState","state","map","Math","random","sort","b","data","components_Header","components_Card","Component","App","components_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y8BA6BeA,MA1Bf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,MAAIE,MAAM,qCACRJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,YACRJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,WAAWC,KAAK,KAAzB,sBAIFL,EAAAC,EAAAC,cAAA,MAAIE,MAAM,YACRJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,YAAT,kBAAoCL,EAAMO,WAA1C,iBAAoEP,EAAMQ,aAG9EP,EAAAC,EAAAC,cAAA,OAAKE,MAAM,6BACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACTJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,aAAV,eACAJ,EAAAC,EAAAC,cAAA,KAAGE,MAAM,QAAT,0HCRKI,SAPF,SAAAT,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,kCACXT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,MAAOC,GAAIf,EAAMe,GAClDC,QAAS,kBAAMhB,EAAMiB,aAAajB,EAAMe,KAAKL,UAAU,oBC4ChDQ,cA7CX,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMtB,KAUV0B,YAAc,WAMN,OALoB,IAAjBC,EAAKC,SAGJT,EAAKU,SAAS,CAAEtB,WAAYY,EAAKW,MAAMvB,WAAa,IAEjDoB,GAjBIR,EAuBnBF,aAAe,WACXU,EAAKI,IAAI,SAAC7B,GAAD,MAAO,CAAC8B,KAAKC,SAAU/B,KAAIgC,KAAK,SAAChC,EAAEiC,GAAH,OAASjC,EAAE,GAAGiC,EAAE,KAAIJ,IAAI,SAAC7B,GAAD,OAAOA,EAAE,MAtB1EiB,EAAKW,MAAQ,CACTM,KAAM,GACN5B,UAAW,EACXD,WAAY,GALDY,mFA+BfG,KAAKL,gDAIL,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkC,EAAD,CAAQ7B,UAAWc,KAAKQ,MAAMtB,UAAWD,WAAYe,KAAKQ,MAAMvB,aAChEN,EAAAC,EAAAC,cAACmC,EAAD,cAvCQC,aCWTC,mLATX,OAEEvC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACZT,EAAAC,EAAAC,cAACsC,EAAD,cALSF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5cd12659.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <>\n      <ul class=\"nav header justify-content-center\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"/\">\n            Click Memory Game\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <p class=\"nav-link\">Current Score: {props.roundScore} | Top Score: {props.highScore}</p>\n        </li>\n      </ul>\n      <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n          <h1 class=\"display-4\">Memory Game</h1>\n          <p class=\"lead\">\n            Click on any picture below, but be sure not to click the same picture twice!\n            Click on any picture to begin.\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Header;\n\n// To Do:\n//Create props that increment\n//Add photos\n//Randomize photos on click\n//top score persists until a new high score\n//Round score that is reset\n//on click creates shuffle, increases score if id has not been clicked\n","import React from \"react\";\nimport \"./style.css\";\n// import GameBoard from \"../GameBoard\";\n\nconst Card = props => (\n    <div className=\"card img-container hover hover\">\n        <img alt={props.name} src={props.image} id={props.id}\n        onClick={() => props.shuffleBoard(props.id)} className=\"shuffleScore\"/>\n    </div>\n)\n\nexport default Card;","import React, { Component } from \"react\";\nimport Header from \"../Header\";\nimport Data from \"../data.json\";\nimport Card from \"../Card\";\n\nclass GameBoard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [],\n            highScore: 0,\n            roundScore: 0\n        }\n    }\n    //on click handler - check if item has been clicked, if so reset round score and shuffle board and update high\n    //score if round score is greater than high score\n    //if not, increase round score by 1, shuffle board and update clicked to true\n    clickyClick = () => {\n            if(Data.clicked === true) {\n\n            } else {\n                this.setState({ roundScore: this.state.roundScore + 1 })\n            }\n            return Data;\n    }\n    \n    \n    //shuffle board function - populate board by looping(map) through data array - randomize - takes in data array\n    //return new shuffled array and update state with new array - update state in this function\n    shuffleBoard = () => {\n        Data.map((a) => [Math.random(), a]).sort((a,b) => a[0]-b[0]).map((a) => a[1]);\n    }\n    // var shuffled = array.map((a) => [Math.random(),a]).sort((a,b) => a[0]-b[0]).map((a) => a[1]);\n\n    //functional component that holds each image\n\n    componentDidMount() {\n        this.shuffleBoard();\n    }\n\n    render() {\n        return(\n            <div>\n                <Header highScore={this.state.highScore} roundScore={this.state.roundScore} />\n                <Card \n                />\n            </div>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport GameBoard from \"./components/GameBoard\";\n\nclass App extends Component {\n  render() {\n    return (\n      \n      <div className=\"App\">\n         <GameBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}